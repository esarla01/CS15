A The title of the homework and the authorâ€™s name (you) 
    Project 2  
    Tansu Erin Sarlak

B The purpose of the program
    
    takes in values and operations/commands to do calculations

C Acknowledgements for any help you received
    
    Nick, and Lexi helped me in OHs

D The files that you provided and a short description of what each file is
  and its purpose

  Files: 

    README         : explanations for tests and files
    
    unit_tests.h   : tests for DatumStack functions
    
    Makefile       : rules to create executables for class implementations

    DatumStack.h   : Interface for DatumStack, the class declaration and
                     public and private member functions and variables
    
    DatumStack.cpp : Implementation for DatumStack, the functions for
                     DatumStack
    
    parser.cpp     : Function that stores RString Datum type
    
    RPNCalc.h      : Interface for RPNCalc, the class declaration and
                     public and private member functions and variables

    RPNCal.cpp     : Implementation for RPNCalc, the functions for
                     RPNCalc 

    SimpleCommand_test.cylc: Tests for simple commands of the calculator

    HardCommand_test.cylc:   Tests for harder commands of the calculator

    edgeCases_test.cylc:     Tests for the edge cases of the calculator 
                             such as error messages

    

E How to compile and run your program
   
    enter "make" and "unit_test"

F An outline of the data structures and algorithms that you used. Given that
  this is a data structures class, you need to always discuss the the data
  structure that you used and justify why you used it. Please discuss the 
  features of the stack data structure and also include (with some 
  justification/explanation) two other situations/circumstances/problems 
  where you could utilize a stack. The algorithm overview is always relevant.
  Please pick a couple interesting/complex algorithms to discuss in the README.
    
  I used the data structure stack and the algorithm run(). I built the stack 
  with the vector class and its built-in functions.
  
  
  A stack is a fixed-capacity kind of abstract data. It lets you add and 
  delete components in a certain order. When an element is added, it is 
  placed at the top. All data can be retrieved from the top of the stack 
  in order. As a result, only the element at the top of the stack may be
  removed, and only one item can be read or deleted at a time.

  Stacks are commonly used to manage layered structures or processes that
  call other functions (or themselves). In a nested structure, instances 
  of itself can be found within instances of itself. Algebraic expressions,
  for example, can be nested since a subexpression of one algebraic expression
  might be another algebraic expression. Stacks are utilized in the 
  implementation of functions, parsers, expression evaluation, and 
  backtracking algorithms.

G Details and an explanation of how you tested the various parts of assignment
  and the program as a whole. You may reference the testing files that you 
  submitted to aid in your explanation.

DatumStack
I used unit_tests.h file to test every single public and private function in 
DatumStack class. I created a print() function (which is commented out)
that specifically for printing all of the contents of the DatumStack and 
called it in certain functions such as push() to check that the the DatumStack
updated correctly. I also tested edge cases such as when the datum stack is 
empty. I made sure that functions like drop() and top() throw errors when they 
are called on an empty stack.

Parser Function
I tested parser function using the main() in the file. I entered multiple exam-
ples such as { {} }{{}} and {{{{341}}123123}}.Then, I printed the output, and
checked if they matched.


Diff Testing
I have created three files for diff testing. 
The first file (simpleCommand_test.cylc) tests simple commands, the second 
file (hardCommand_test.cylc) tests hard commands, and the third file 
(edgeCases_test.cylc) tests edge cases in the file.

I considered the following edge cases:

1) division by zero error message
2) operation by non_integer
3) open a file that doesn't exis
4) swapping without two elements
5) printing when the datum stack is empty_stack
6) using not when the last element is non-boolean
7) dropping from an empty datum stack
8) calling exec when the topmost element is non_RString
9) execing { quit }
10) comparing RString and boolean with ( == )comparison
11) execing { }
12) open file with { }








    