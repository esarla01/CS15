/*
 *README
 *Erin Sarlak
 *April 6, 2021
 *
 *CS 15 HW 3 Binary Searh Tree
 *
 *This file contains the answer to written questions.
 *
 */

A The title of the homework and the authorâ€™s name:
HW 3:Binary Search Trees
Erin Sarlak

B The purpose of the program
The purpose is to implement a binary search tree(BST) that supports a multiset
(also known as a bag), which is a set that can contain duplicate values.

C Acknowledgements for any help you received
I went to office hours on Sunday. Ellis, and Roger helped me.

D The files that you provided and a short description of what each file
is and its purpose

BinarySearchTree.cpp
This file contains the imlementation of the BinarySearchTree which is the code
for functions of the class.

BinarySearchTree.h
This file contains the definition of the BinarySearchTree class.

unit_tests.h:
This file contains the test codes that makes sure public and private functions
that belong to the the class BinarySearchTree works properly.

my_output:
The output of hw3 program.

comp_output:
The output of the_hw3 program.


E How to compile and run your program
First, we enter "make."
Second, we enter "/.hw3"


F Details and an explanation of how you tested the various parts of
assignment and the program as a whole. You may reference the testing
files that you submitted to aid in your explanation.

I used diff testing and unit test to test my program. I implemented at least 
one test function for every public function that is expected of us to complete
in the assignment. For every function, I implemented a general test that checks
the function for regular cases and also edge tests that makes sure the function
wors for edge cases. In general, the edge cases I tested were regarding empty
trees, trees with single nodes, trees with multiple of the same value. 
Specifically, I tested insert, operator assignment and remove function very 
carefully. 
For insert, I tested the cases:
1.Inserting multiple numbers to an empty tree.
2.Inserting the same number more than once.

For operator assignment, I tested the cases:
1.Operator assignment for when tree is empty.
2.Operator assignment for when tree is non empty.
3.Operator assignment for when tree has repeated value.

For remove function. I tested the cases:
1.Removing from an empty tree.
2.Trying to remove a node that doesn't exist.
4.Removing the first node when the tree has no child.
5.Removing the first node when the node has 1 child.
6.Removing the first node when the node has 2 children.
7.Removing the firs tnode when its count is more than one.
8.Removing any node that has no child.
9.Removing any node that has 1 child.
10.Removing any node that has 2 children whose minimum node in 
its right subtree has a right child.
11.Removing any node that has 2 children whose minimum node is 
a leaf node.

These were the edge cases that are really essential to the program.
Besides these, I also made other test functions targeting other public 
functions. Also, I used diff testing on the main file that is provided
to us. The files my_error and comp_error show the results of both the 
my hw3 program and given the_hw3 program. After careful testing and 
trial error method, I was able to get both files to match, which means
that both BST classes (given and mine) implements the main in the same
way.

Questions:
1.Review the remove function explanation in the homework specification. 
Will your implementation of the remove function use (the privately 
defined) find_min() or find_max()? Why?

Yes, it will. One of the cases that I need to take into account in my
remove function is when the value to be removed has two children. In that
case, instead of removing the node for that value, I will copy the minimum
data(value) on the right subtree of the node with the given value and then 
remove thaat node with the minimum value. To do so, I need to be able to
easily access/find the minimum node on the right subtree of that node.
For this pupose, I need to use find_min() function.

2.Is it possible for (the privately defined) find_min() or find_max() to
return a value that does not point to a valid node? Why or why not
There is always a node that is the least and the most in a subtree.
However, if the tree is empty then there is no value of the node to be 
returned. Thus, the answer is yes.

3.a.
If you answered yes to 2, then what value is returned? In what
case will that value be returned?
find_min(): Returns the largest possible integer if tree is empty. 
find_max(): Returns the smallest possible integer if tree is empty.


3.b. If you answered no to Q2, then then consider the tree below and
specify the node returned when find_min() is invoked on the
right child of the node with value of 5: The answer is 4.

4.Write pseudocode for your private find_min() function.

base case:
when the left child of the node is a nullptr, return the node. (since the node is then the 
bottom left leaf in the subtree)

recursive case:
call the function findmin(node->left) to recurse
through the subtree to find the bottom left leaf


5.Write pseudocode for your private find_max() function.

base case:
when the right child of the node is a nullptr, return the node. (since the node is then the 
bottom right leaf in the subtree)

recursive case:
call the function findmax(node->right) to recurse
through the subtree to find the bottom right leaf


6.Write pseudocode for your private post_order_delete() function

base cases:
if root is nullptr then reuturn (since the the tree is empty)

else if the node is  nullptr then return (since the node is a leaf node)

recursive case:
call the function post_order_delete(node->left) and
then post_order_delete(node->right) to recurse through the tree first visiting left and then right of subtrees.
then, delete the current node