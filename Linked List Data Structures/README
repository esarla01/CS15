(A) The title of the homework and the authorâ€™s name (you)

Title: CharArrayList (COMP 15 HW 1)

Author: Erin Sarlak

Date: February 8, 2022


(B) The purpose of the program

This program implements a version of the linked list data structures that
contains characters.


(C) Acknowledgements for any help you received

Tufts CS15 teacher assistants and the CS15 ppt slides.


(D) The files that you provided and a short description of what each file 
is and its purpose

CharArrayList.cpp
This file contains the imlementation of the CharLinkedList which is the code
for functions of the class.

CharArrayList.h
This file contains the definition of the CharLinkedList class.

unit_tests.h:
This file contains the test codes that makes sure public and private functions
that belong to the the class CharLinkedList works properly.


(E) How to compile and run your program

Makefile is used to compile the program. Inside Makefile the command unit_test
is defined. This command when entered in terminal compiles and runs the 
program. Also, it runs unit test driver.



(F) An outline of the data structures and algorithms that you used. Given
that this is a data structures class, you always need to discuss the data
structure that you used and justify why you used it. Specifically for
this assignment please discuss the features of arrays, major advantages
and major disadvantages of utilizing an array list as you have in this
assignment. The algorithm overview may not be relevant depending
on the assignment.

Doubly Linked Lists:
This program employs doubly linked list data structure. A doubly linked list 
is a data structure that consists of nodes that store data and are linked to 
each other with pointers. Nodes are the fundemental building blocks of doubly 
linked lists. "char Data" stores the characters in the node, "Node *next" 
links the node to the next node and"Node *prev" links the node to the 
previous node. Node pointer called front and back form the two end of each 
linked list.

Advantages:
Adding data into and removing data from the list doesn't require shifting 
other nodes. Thus, adding into and removing from a linked list is cheap 
and time efficent.


Disadvantages:
Data cannot be retrieved based on its index in the list. Thus, the list 
needs to go through all of the data before the specified index to get to 
desired data which is a expensive and time consuming.


(G) Details and an explanation of how you tested the various parts of 
assignment and the program as a whole. You may reference the testing
files that you submitted to aid in your explanation.

I wrote test functions for each of the member function of the class in 
unit_test.h file. To test each member function, I specifically wrote 
unit_test functions that target both regular and edge cases like when 
the the linked list is empty or the entered is out of bounds. 

For example, while testing insertAt function, I focused on adding in front,
back, middle, in an empty linked list and at a out of bound index. My unit
test functions aimed to test if the function worked for each of these cases.
In total, I wrote 38 tests in unit test to make sure my linked list functions
work.


Questions
(Q1) Which functions in the interface were easier to implement for linked lists
compared to array lists. Why?

inserAt: 
InserAt in array lists require multiple complicated step which include 
creating a new array with larger capacity, then copying the elements till 
the index, then  inserting the elmement in the specified index, and then 
copying the rest of the characters starting fro one place after the index.
On the other hand, insertAt in linked lists only require you to handle the 
node before and after the index. The steps include only creating a new node
and then updating the next and prev pointers which are much easier and less
complicated compared to the steps for insertAt in array lists.

popFromBack & popFromFront:
PopFromBack  and popFromFront in array lists require you to allocate smaller
arrays in the heap and then copy all of the elements excepte either the first 
or the last one to the new array and then delete the old one. These steps are
again complicated just like in insertAt. However, PopFromBack  and popFromFront 
in linked lists only require you to create a new node and then update front/back 
and the first/last node in the list, which is quite simple.


(Q2) Which functions in the interface were harder to implement for linked lists 
compared to array lists? Why?

elementAt:
ElementAt in linked lists require to go over all of the nodes till the node at 
the specified index with either recursion or loop. On the other hand, elmentAt
in array lists is a very concise fucntion that directly return the array with 
in the specified index. This much less complicated and easier to implement
compared to the steps for elementAt in linked lists.

clear:
Clear linked in linked list requires you to delete each node in the list 
individually with either recursion or loops and then update front and back
pointers. However, array list can direcly recycle the data with the delete
array command which is more concise and easier to implement.



(Q3) If a client had an existing program that uses CharArrayLists, what changes 
they have to make to their code to switch to CharLinkedLists?

The client doesn't need to use shrink enymore since there will be no nodes
hanging around like the array slots that are empty in array lists. The rest of 
the code can stay as it is because all of the member functions that are
created for each list serves the same purpose. In short, only the 
implementation of the classes are different, but since we wrote the equivalent
functions for each class, the client doesn't need to do any change in their 
code.
